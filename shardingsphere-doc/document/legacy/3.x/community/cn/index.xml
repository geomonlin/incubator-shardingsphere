<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/</link>
    <description>Recent content on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/legacy/3.x/community/cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>订阅指南</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/subscribe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/subscribe/</guid>
      <description>在使用ShardingSphere的过程中，如果您发现任何问题，有新的想法、建议都可以通过Apache邮件列表、gitHub提交issue的方式参与到ShardingSphere的社区建设中。
订阅Apache ShardingSphere（Incubating）的邮件列表  发送订阅邮件 用自己的邮箱向dev-subscribe@shardingsphere.apache.org发送一封邮件，主题和内容任意（建议用非163邮箱，易被拦截）
 接收确认邮件并回复 完成步骤1后，您将收到一封来自dev-help@shardingsphere.apache.org的确认邮件（如未收到，请确认该邮件是否已被拦截，或已经被自动归入“订阅邮件”、“垃圾邮件”、“推广邮件”等文件夹）。直接回复该邮件，或点击邮件里的链接快捷回复即可，主题和内容任意。
 接收欢迎邮件 完成以上步骤后，您会收到一封主题为WELCOME to dev@shardingsphere.apache.org的邮件，至此您已成功订阅Apache ShardingSphere（Incubating）的邮件列表。
  gitHub提交issue 可在Issue列表以issue的方式提交您的问题和建议。</description>
    </item>
    
    <item>
      <title>贡献者指南</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/contributor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/contributor/</guid>
      <description> 您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。
提交issue  在提交issue之前，请经过充分的搜索，确定该issue不是通过简单的检索即可以解决的问题。 查看issue列表，确定该issue不是一个重复的问题。 新建一个issue。 使用一个清晰并有描述性的标题来定义issue。 如果您提交的是一个bug，请尽量提供如下信息：  详细的描述复现bug的步骤。包括您使用的SQL，配置情况，预计产生的结果，实际产生的结果。并附加详细的TRACE日志。 ShardingSphere以及操作系统版本。 在github提供用于可以复现问题的项目演示代码。 如果程序抛出异常，请附加完整的堆栈日志。 如有可能，请附上屏幕截图或动态的GIF图，这些图片能帮助演示整个问题的产生过程。 如果涉及性能问题，请附加上CPU，内存或网络磁盘IO的Profile截图。  如果您提交的是一个建议，请尽量提供如下信息：  详细描述增强功能的行为模式。 解释说明为什么该功能是对大多数用户有用的。新功能应该具有广泛的适用性。 如有可能，可以列出其他数据库中间已经具备的类似功能。开源与商用软件均可。  在提交issue之后，对该issue分配合适的标签。如：bug，enhancement，discussion等。 请对自己提交的issue保持关注，在讨论中进一步提供必要信息。 如果问题已经解决，请关闭该issue。如果您不及时关闭，我们将在三天后将其关闭。 如果问题有新的进展，请将之前关闭的issue再次开启。请注意，只有您自己关闭的issue可以再次开启，逾期而被我们关闭的issue您将没有再次开启该issue的权限。  提交pull request  请在选择您要修改的issue。如果是您新发现的问题或想提供issue中没有的功能增强，请先新建一个issue并设置正确的标签。 在选中相关的issue之后，请回复以表明您当前正在这个issue上工作。并在回复的时候为自己设置一个deadline，添加至回复内容中。 在开发者列表中找到一个导师，导师会在设计与功能实现上给予即时的反馈。 您需要fork一个分支到您自己的repo来开始工作。 请您在开发过程中遵循ShardingSphere的开发规范。并在准备提交pull request之前完成相应的检查。 完成后，发送一个pull request到ShardingSphere的dev分支，请不要提交pull request至master分支中。 接着导师做CodeReview，然后他会与您讨论一些细节（包括设计，实现，性能等）。当导师对本次修改满意后，会将提交合并到当前开发版本的分支中。 最后，恭喜您已经成为了ShardingSphere的官方贡献者！  </description>
    </item>
    
    <item>
      <title>提交者指南</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/committer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/committer/</guid>
      <description> 成为一个提交者  过去的6个月持续的做出贡献 深入理解ShardingSphere核心技术 遵守开发规范 高质量提交 开启Google 2FA(2FA)  维护者责任 维护者是花费大量时间和精力维护项目组件的提交者，这意味着维护者应该：
 及时和可靠的评审PR 积极削减PR积压 解答问题 接纳核心更改、bug、特性请求 对于重要的变更，维护者需要确保它完成 改进流程和工具 重构  </description>
    </item>
    
    <item>
      <title>2FA</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/2fa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/2fa/</guid>
      <description>双因素认证(2FA) 双因子验证（2FA）是指结合密码以及实物（信用卡、SMS手机、令牌或指纹等生物标志）两种条件对用户进行认证的方法。 为保证提交者账户的安全，我们需要您在GitHub上启用2FA来验证登录用户、并贡献代码。
具体内容可参考2FA。
 注意：若您不启用2FA，您将会从本项目中除名，并且无法访问我们的仓库以及来自我们私有仓库的fork仓库。
 在GitHub上启用2FA 具体操作，请参考使用TOTP启用双因素认证。
当您开启2FA验证后，您需要使用用户名/密码 + 手机认证码的方式来登录GitHub。
提示：若无法通过页面链接下载对应APP，可在手机的应用市场或是APP Store里搜索并下载Google Authenticator。
如何提交代码 当启用2FA认证后，您需要生成私有访问Token来进行git提交等操作。此时，您将使用用户名 + 私有访问Token 来代替 用户名 + 密码的方式 进行代码的提交。
具体操作，请参考创建私有Token。</description>
    </item>
    
    <item>
      <title>开发规范</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/code-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/code-conduct/</guid>
      <description> 开发理念  用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理念，追求整洁优雅代码。 一致 代码风格、命名以及使用方式保持完全一致。 精简 极简代码，以最少的代码表达最正确的意思。高度复用，无重复代码和配置。及时删除无用代码。 抽象 层次划分清晰，概念提炼合理。保持方法、类、包以及模块处于同一抽象层级。 极致 拒绝随意，保证任何一行代码、任何一个字母、任何一个空格都有其存在价值。  代码提交行为规范  确保通过全部测试用例，确保执行mvn clean install可以编译和测试通过。 确保覆盖率不低于dev分支。 确保使用Checkstyle检查代码，违反验证规则的需要有特殊理由。模板位置在sharding-sphere/src/resources/sharding_checks.xml，请使用checkstyle 8.8运行规则。 确保遵守编码规范。  编码规范  使用linux换行符。 缩进（包含空行）和上一行保持一致。 类声明后与下面的变量或方法之间需要空一行。 不应有无意义的空行。 类、方法和变量的命名要做到望文生义，避免使用缩写。 返回值变量使用result命名；循环中使用each命名循环变量；map中使用entry代替each。 捕获的异常名称命名为ex；捕获异常且不做任何事情，异常名称命名为ignored。 配置文件使用驼峰命名，文件名首字母小写。 需要注释解释的代码尽量提成小方法，用方法名称解释。 equals和==条件表达式中，常量在左，变量在右；大于小于等条件表达式中，变量在左，常量在右。 除了用于继承的抽象类之外，尽量将类设计为final。 嵌套循环尽量提成方法。 成员变量定义顺序以及参数传递顺序在各个类和方法中保持一致。 优先使用卫语句。 类和方法的访问权限控制为最小。 方法所用到的私有方法应紧跟该方法，如果有多个私有方法，书写私有方法应与私有方法在原方法的出现顺序相同。 方法入参和返回值不允许为null。 优先使用三目运算符代替if else的返回和赋值语句。 优先使用lombok代替构造器，getter, setter方法和log变量。 优先考虑使用LinkedList，只有在需要通过下标获取集合中元素值时再使用ArrayList。 ArrayList，HashMap等可能产生扩容的集合类型必须指定集合初始大小，避免扩容。 日志与注释一律使用英文。 注释只能包含javadoc，todo和fixme。 公开的类和方法必须有javadoc，其他类和方法以及覆盖自父类的方法无需javadoc。  单元测试规范  测试代码和生产代码需遵守相同代码规范。 如无特殊理由，测试需全覆盖。 每个测试用例需精确断言。 准备环境的代码和测试代码分离。 只有junit Assert，hamcrest CoreMatchers，Mockito相关可以使用static import。 单数据断言，应使用assertTrue，assertFalse，assertNull和assertNotNull。 多数据断言，应使用assertThat。 精确断言，尽量不使用not，containsString断言。 测试用例的真实值应名为为actualXXX，期望值应命名为expectedXXX。 测试类和@Test标注的方法无需javadoc。  </description>
    </item>
    
    <item>
      <title>外部依赖</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/external-dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/external-dependency/</guid>
      <description>Dependency License scope     Guava Apache-2.0 compile   Guava Retrying Apache-2.0 compile   commons-codec Apache-2.0 compile   commons-pool Apache-2.0 test   commons-dbcp Apache-2.0 test   netty Apache-2.0 compile   curator Apache-2.0 compile   grpc Apache-2.0 compile   protobuf BSD 3-clause compile   lombok MIT provided   groovy Apache-2.0 compile   snakeyaml Apache-2.0 compile   spring-context-support Apache-2.</description>
    </item>
    
    <item>
      <title>测试引擎</title>
      <link>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/legacy/3.x/community/cn/contribute/test-engine/</guid>
      <description>ShardingSphere提供了完善的测试引擎。它以XML方式定义SQL，每条SQL由SQL解析单元测试引擎和整合测试引擎驱动，每个引擎分别为H2、MySQL、PostgreSQL、SQLServer和Oracle数据库运行测试用例。
SQL解析单元测试全面覆盖SQL占位符和字面量维度。整合测试进一步拆分为策略和JDBC两个维度，策略维度包括分库分表、仅分表、仅分库、读写分离等策略，JDBC维度包括Statement、PreparedStatement。
因此，1条SQL会驱动5种数据库的解析 * 2种参数传递类型 + 5种数据库 * 5种分片策略 * 2种JDBC运行方式 = 60个测试用例，以达到ShardingSphere对于高质量的追求。
整合测试 测试环境 整合测试由于涉及到真实数据库环境，需要先完成以下准备工作并测试：
 在准备测试的数据库上运行resources/integrate/schema/manual_schema_create.sql创建数据库(MySQL、PostgreSQL、SQLServer)及Schema（仅Oracle）。
 修改sharding-jdbc/src/test/resources/integrate/env.properties中的databases，指定需要测试的数据库。
 运行AllIntegrateTests，检查测试结果。
  注意事项  如需测试Oracle，请在pom.xml中增加Oracle驱动依赖。
 为了保证测试数据的完整性，整合测试中的分库分表采用了10库10表的方式，因此运行测试用例的时间会比较长。
  SQL解析引擎测试 测试环境 SQL解析引擎测试是基于SQL本身的解析，因此无需连接数据库，直接运行AllParsingTests即可。</description>
    </item>
    
  </channel>
</rss>