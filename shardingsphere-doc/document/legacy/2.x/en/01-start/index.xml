<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01-starts on </title>
    <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/</link>
    <description>Recent content in 01-starts on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/</guid>
      <description>The Chapter Introduction  To quickly learn the powerful features of Sharding-JDBC, please read Quick Start. How to run some DEMO tests simply? Please read Usage Example。 If you encounter any problems in use, please try to find the answers in FAQ. Want to use Sharding-JDBC in your project? You may be concerned about what it can do and [what it can not do]不能做什么. Database middleware generally supports partial SQL syntax, in The list of available SQL syntax where you can learn more aobut available SQL syntax.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/quick-start/</guid>
      <description>To configure by using API The Maven Installation &amp;lt;!-- imoort the core module of sharding-jdbc --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.shardingjdbc&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sharding-jdbc.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  The rule configurtion You can implement Sharding by configuring rules for Sharding-JDBC. The following example firstly takes the module of user_id to split databases and then takes the module of order_id to split tables. At last, two tables are in each of two databases.
To configure by JAVA codes:</description>
    </item>
    
    <item>
      <title>Usage Example</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/code-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/code-demo/</guid>
      <description>Please refer to the usage examples of Sharding-JDBC in Usage Example
Notices:  Please run resources/manual_shcema.sql on the test MySQL database to automatically create the database for testing. If PostgreSQL, SQLServer, or Oracle is used, you need to create test database by running your scripts.
 Users need to modify the database URL, driver, username, password, yaml or Spring configuration in the example.
 In the example of Read-write splitting, user needs to build the Master-Slave replication relationship of the databases, otherwise the null value will be obtained when querying in the Slave.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/faq/</guid>
      <description>1. Why do Compilation Errors arise When Reading Sources? The answer is:
Sharding-JDBC uses lombok to implement minimal code. For details, please refer to lombok.
Sharding-JDBC-orchestration module needs to perform MVN install command to generate gRPC-related Java file according to the protobuf file.
2. How to solve the Error of Cloud not resolve placeholder &amp;hellip; in string value &amp;hellip;？ The answer is:
For the inline expressions the Spring configuration file use a Groovy syntax, whose variable operator is ${} same with Spring default placeholder, so it is necessary to increase something in the configuration file:</description>
    </item>
    
    <item>
      <title>Feature List</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/features/</guid>
      <description>The functional requirement Data Sharding  Perfect SQL parsing, Comprehensive SQL queries for aggregation/grouping/sorting/LIMIT/TOP and cascade/Cartesian-product. Support for internal or external join quiries. Flexible Sharding strategy. Support =, BETWEEN, IN, other multi-dimensional Sharding or user-defined Sharding strategy. Support the sharing of Sharding column. Hint-based mandatory Sharding routing.  Read-write splitting  Support SQL Passthrough by using independent Read-write splitting Support Read-write splitting configuration for single-master and multi-slaves Hint-based mandatory master-database routing  B.</description>
    </item>
    
    <item>
      <title>Use Limits</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/limitations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/limitations/</guid>
      <description>The list of unsupported items in JDBC Sharding-JDBC currently supports common JDBC methods.
The DataSource interface  Do not support methods related to timeout.  The Connection interface  Does not support stored procedures, functions, cursor operation Does not Native SQL Does not support savepoint related operations Does not support Schema / Catalog operation Does not support Custom type mapping  The interface of Statement and PreparedStatement  Does not support statements that return multiple result sets (That is, stored procedures) Does not support using international characters  The ResultSet interface  Does not support getting result set pointer position Does not support changing the position of the result pointer by none-next methods Does not support modifying the content of result set Does not support using international characters Does not support getting Array  The interface of JDBC 4.</description>
    </item>
    
    <item>
      <title>The list of available SQL syntax</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/sql-supported/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/sql-supported/</guid>
      <description>Because of the flexibility and complexity of SQL syntax and the different handling for SQL queries for distributed databases and single database, not all of the SQLs can be used in Sharding-JDBC.
This section lists the supported SQL syntax and the unsupported SQL syntax for user to look up. In the future, more and more SQL syntaxes will be supported in Sharding-JDBC.
The global unsupported items Support some kinds of subqueries Please refer to The Pagination and subquery。</description>
    </item>
    
    <item>
      <title>The performance-test report</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/stress-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/01-start/stress-test/</guid>
      <description>The performance-test report of Sharding-JDBC The summary of test result 1、The test of performance lose: When the server resources are sufficient and the number of concurrency is the same, we compare the performance loss of JDBC and Sharding-JDBC, the result is that the performance loss of Sharding-JDBC is less than 7%, compared with JDBC.
2、The test of performance: The server resources are used to the limit, the throughput of Sharding-JDBC and JDBC are on a fairly level.</description>
    </item>
    
  </channel>
</rss>