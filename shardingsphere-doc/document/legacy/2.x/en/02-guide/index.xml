<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02-guides on </title>
    <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/</link>
    <description>Recent content in 02-guides on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>User Manual</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/</guid>
      <description>The Chapter Introduction  To take a quick look on basic concepts, please read Basic Concepts. A detailed example is given in section Database Sharding to introduce how to use Sharding-JDBC to shard database or table. To further improve performance after sharding, you can read Read-write splitting. In consideration of flexible and complex Sharding-JDBC configuration, Domain Model Configuration clearly shows you the relationships among the various configuration classes. Configuration Manual describes how to configure some items with JAVA, YAML, Spring or Spring Boot.</description>
    </item>
    
    <item>
      <title>Basic Concepts </title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/concepts/</guid>
      <description>This section introduces some of the basic concepts for Sharding-JDBC.
LogicTable The integrated table name for horizontal-splited tables. e.g. There are ten spliting order tables from t_order_0 to t_order_9, and their logic table name is t_order.
ActualTable The physical table really existed in the sharding database. e.g. t_order_0~t_order_9 in the previous example.
DataNode The smallest unit of data-sharding. It consists of data source name and table name, e.g. ds_1.t_order_0. By default, the table structure of each sharding is the same, so that you can directly configure the correspondence between logical tables and actual tables.</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/sharding/</guid>
      <description>Please read Quick Start before you start with this guide. This section will further introduce the usage of Sharding-JDBC&amp;rsquo;s Sharding in more complex cases.
Database Information Two data sources, db0 and db1 are for example to illustrate. Each data source has two sets of tables, t_order_0 and t_order_1, t_order_item_0 and t_order_item_1. The SQLs for creating table:
CREATE TABLE IF NOT EXISTS t_order_x ( order_id INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY (order_id) ); CREATE TABLE IF NOT EXISTS t_order_item_x ( item_id INT NOT NULL, order_id INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY (item_id) );  The correspondence between LogicTable and ActualTable Uniform distribution Tables are evenly distributed in each data source.</description>
    </item>
    
    <item>
      <title>Read-write splitting</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/master-slave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/master-slave/</guid>
      <description>Concept In order to share reading/writing pressure , we need to classify data sources into different roles. The data source classified as Master is to provide writing operations, and classified as Slaves are to provide reading operations. A single Master can connect with multiple Slaves.
Done List  To configure Read-write splitting on single master and multiple slaves. You can use this function independently or along with sharding. Provide SQL passthrough when the Read-write splitting is used independently .</description>
    </item>
    
    <item>
      <title>Domain Model Configuration</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/config_domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/config_domain/</guid>
      <description>This section explains configuration domain models in Sharding-JDBC. The following class diagram is about those domain models in Sharding-JDBC.
The Factory Method Pattern The yellow part of the figure represents the Sharding-JDBC entry API, which is provided in the form of factory methods. It includes ShardingDataSourceFactory factory class and MasterSlaveDataSourceFactory factory class. ShardingDataSourceFactory is used to create JDBC driver for Sharding + Read-write splitting, but MasterSlaveDataSourceFactory is to create JDBC driver only for Read-write splitting.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/configuration/</guid>
      <description>1.JAVA Configuration Import the dependency of maven &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.shardingjdbc&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sharding-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Configuration Example Sharding Configuration DataSource getShardingDataSource() throws SQLException { ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration(); shardingRuleConfig.getTableRuleConfigs().add(getOrderTableRuleConfiguration()); shardingRuleConfig.getTableRuleConfigs().add(getOrderItemTableRuleConfiguration()); shardingRuleConfig.getBindingTableGroups().add(&amp;quot;t_order, t_order_item&amp;quot;); shardingRuleConfig.setDefaultDatabaseShardingStrategyConfig(new InlineShardingStrategyConfiguration(&amp;quot;user_id&amp;quot;, &amp;quot;demo_ds_${user_id % 2}&amp;quot;)); shardingRuleConfig.setDefaultTableShardingStrategyConfig(new StandardShardingStrategyConfiguration(&amp;quot;order_id&amp;quot;, ModuloShardingTableAlgorithm.class.getName())); return ShardingDataSourceFactory.createDataSource(createDataSourceMap(), shardingRuleConfig); } TableRuleConfiguration getOrderTableRuleConfiguration() { TableRuleConfiguration orderTableRuleConfig = new TableRuleConfiguration(); orderTableRuleConfig.setLogicTable(&amp;quot;t_order&amp;quot;); orderTableRuleConfig.setActualDataNodes(&amp;quot;demo_ds_${0..1}.t_order_${0..1}&amp;quot;); orderTableRuleConfig.setKeyGeneratorColumnName(&amp;quot;order_id&amp;quot;); return orderTableRuleConfig; } TableRuleConfiguration getOrderItemTableRuleConfiguration() { TableRuleConfiguration orderItemTableRuleConfig = new TableRuleConfiguration(); orderItemTableRuleConfig.setLogicTable(&amp;quot;t_order_item&amp;quot;); orderItemTableRuleConfig.setActualDataNodes(&amp;quot;demo_ds_${0..1}.t_order_item_${0..1}&amp;quot;); return orderItemTableRuleConfig; } Map&amp;lt;String, DataSource&amp;gt; createDataSourceMap() { Map&amp;lt;String, DataSource&amp;gt; result = new HashMap&amp;lt;&amp;gt;(2, 1); result.</description>
    </item>
    
    <item>
      <title>Orchestration</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/orchestration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/orchestration/</guid>
      <description>Sharding-JDBC provides orchestration for databases in Version 2.0.0.M1, which mainly includes:
 The centralized and dynamic configuration can support the dynamic strategy switching of Sharding and read-write splitting. Provide the circuit-breaker mechanism for database access, and the switch that disables access to Slaves. Support for Zookeeper and Etcd registry.  Zookeeper Please use Zookeeper 3.4.6 and above to set up the registration center. Reference
Etcd Please use Etcd V3 and above to set up the registration center.</description>
    </item>
    
    <item>
      <title>Mandatory Routing</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/hint-sharding-value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/hint-sharding-value/</guid>
      <description>Notice: Please read Sharding carefully before reading this chapter.
 Background After reading the previous introduction, you can notice that the sharding columns in the sharding algorithm always come from the WHERE condition in the SQLs. For example: for the logical table t_order, if the sharding column of the data source is user_id, the record with the odd number of user_id will be routed to db1, and the one with the even value will be routed to db2.</description>
    </item>
    
    <item>
      <title>Distributed Primary key</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/key-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/key-generator/</guid>
      <description>Background In traditional database software, the technology of primary key generation is mostly required. For MySQL, it is difficult to generate the global unique ID for different actual tables after Sharding. A simple solution is to generate the global unique ID by setting the rule of global ID generation, but this requires additional maintenance and also restricts the extensibility of the framework. There are a number of third-party solutions that can solve this problem, such as UUID which relies on specific algorithms to generate global unique primary keys, or other ID generation services.</description>
    </item>
    
    <item>
      <title>Transaction Support</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/transaction/</guid>
      <description>Considering the performance, sharding-jdbc decides not to support strong consistency distributed transactions. In the future, it will support the B.A.S.E transaction which makes the final result of all the distributed databases consistent. Currently, in addition to supporting weak XA transactions, we have been able to provide the Best-Effort-Delivery transaction, one of the B.A.S.E transaction.
Notices:
 Support the none-cross-database transactions, e.g. table sharding without database sharding, or database sharding with the queries routed in the same database.</description>
    </item>
    
    <item>
      <title>The Pagination and subquery</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/subquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/subquery/</guid>
      <description>Sharding-JDBC supports the paging query of MySQL, PostgreSQL and Oracle. For SQLServer, due to its complex paging query, only partial queries can be executed.
The Paging performance The performance bottleneck The SQLs with excessive paging offset can result in the poor performance of the database. Take MySQL for example:
SELECT * FROM t_order ORDER BY id LIMIT 1000000, 10  This SQL makes MySQL to retrieve 10 records after skipping over 1000000 records, if no suitable index can be used.</description>
    </item>
    
    <item>
      <title>Test Engine</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/test-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/test-framework/</guid>
      <description>Sharding-JDBC provides a perfect test engine. It defines SQL in the form of XML, and each of SQL is driven by an SQL parsing unit test engine and an integration test engine, each of which provides test cases for H2, MySQL, PostgreSQL, SQL server, and Oracle databases. The SQL unit test covers SQL placeholders and literal dimensions, and the integration test consists of strategy and JDBC. The strategy in integration test is made up of Sharding, table Sharding, database Sharding, and a Read-write splitting, and the JDBC is made up of Statement and PreparedStatement.</description>
    </item>
    
    <item>
      <title>APM</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/apm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/apm/</guid>
      <description>The brief APM is the abbreviation of Application Performance Monitoring. Currently its core function is the performance diagnosis of distributed system, including call chain demonstration, application topology analysis, etc.
Sharding-JDBC Team work with SkyWalking Team to introduce an automatic prober of Sharding-JDBC to send the performance data of Sharding-JDBC to SkyWalking.
Usage Using the SkyWalking plugin Please refer to SkyWalking Manual。
Using OpenTracing plugin If you want to use other APM systems which support OpenTracing, you can use the sharding-jdbc-opentracing plugin to work with those APM systems.</description>
    </item>
    
    <item>
      <title>Sharding-JDBC-Server</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/sharding-jdbc-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/en/02-guide/sharding-jdbc-server/</guid>
      <description>Introduction Sharding-JDBC-Server is the MySQL protocol agent based on Sharding-JDBC, and more friendly for management and debugging. You can use any clients compatible with MySQL protocol, e.g. MySQL Command Client, MySQL Workbench to connect to Sharding-JDBC-Server to query and modify data.
In brief, Sharding-JDBC-Server is a standard MySQL (Other databases might be included in future) that also supports Sharding, Read-write-splitting, and orchestration and is also like the management interface for all back-end MySQL Sharding.</description>
    </item>
    
  </channel>
</rss>