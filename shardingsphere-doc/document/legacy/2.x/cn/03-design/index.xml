<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>03-designs on </title>
    <link>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/</link>
    <description>Recent content in 03-designs on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计规划</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/</guid>
      <description> 本章导航  想了解架构设计及项目模块设计的概念，请阅读架构设计及目录结构说明。 Sharding-JDBC未来规划有哪些呢？请阅读未来规划。  </description>
    </item>
    
    <item>
      <title>架构设计</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/architecture/</guid>
      <description></description>
    </item>
    
    <item>
      <title>模块说明</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/module/</guid>
      <description>sharding-jdbc ├──sharding-jdbc-core 分库分表、读写分离核心模块，可直接使用 ├──sharding-jdbc-core-spring Spring配置父模块，不应直接使用 ├ ├──sharding-jdbc-core-spring-namespace Spring命名空间支持模块，可直接使用 ├ ├──sharding-jdbc-core-spring-boot SpringBoot支持模块，可直接使用 ├──sharding-jdbc-orchestration 数据库服务编排治理模块，可接使用 ├──sharding-jdbc-transaction-parent 柔性事务父模块，不应直接使用 ├ ├──sharding-jdbc-transaction 柔性事务核心模块，可直接使用 ├ ├──sharding-jdbc-transaction-storage 柔性事务存储模块，不应直接使用 ├ ├──sharding-jdbc-transaction-async-job 柔性事务异步作业，不应直接使用，直接下载tar包配置启动即可 ├──sharding-jdbc-plugin 插件模块，目前包含自定义分布式自增主键，可直接使用 sharding-jdbc-example 使用示例 ├──sharding-jdbc-raw-jdbc-example 原生JDBC的使用示例 ├ ├──sharding-jdbc-raw-jdbc-java-example 基于Java配置的原生JDBC的使用示例 ├ ├──sharding-jdbc-raw-jdbc-yaml-example 基于Yaml配置的原生JDBC的使用示例 ├──sharding-jdbc-spring-example Spring的使用示例 ├ ├──sharding-jdbc-spring-namespace-jpa-example 基于Spring的JPA使用示例 ├ ├──sharding-jdbc-spring-namespace-mybatis-example 基于Spring的Mybatis使用示例 ├──sharding-jdbc-spring-boot-example SpringBoot的使用示例 ├ ├──sharding-jdbc-spring-boot-data-jpa-example 基于Spring Boot Data JPA的使用示例 ├ ├──sharding-jdbc-spring-boot-data-mybatis-example 基于Spring Boot Data Mybatis的使用示例 ├──sharding-jdbc-orchestration-example 数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-zookeeper-java-example Zookeeper基于Java配置的数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-etcd-java-example Etcd基于Java配置的数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-zookeeper-yaml-example Zookeeper基于Yaml配置的数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-etcd-yaml-example Etcd基于Yaml配置的数据库服务编排治理的使用示例 ├──sharding-jdbc-orchestration-spring-example 数据库服务编排治理的Spring使用示例 ├ ├──sharding-jdbc-orchestration-zookeeper-spring-boot-example Zookeeper基于Spring Boot配置的数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-etcd-spring-boot-example Etcd基于Spring Boot配置的数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-zookeeper-spring-namespace-example Zookeeper基于Spring Namespace配置的数据库服务编排治理的使用示例 ├ ├──sharding-jdbc-orchestration-etcd-spring-namespace-example Etcd基于Spring Namespace配置的数据库服务编排治理的使用示例 ├──sharding-jdbc-transaction-example 柔性事务的使用示例 sharding-jdbc-doc 文档md源码模块，不应直接使用，直接阅读官网即可  </description>
    </item>
    
    <item>
      <title>未来线路规划</title>
      <link>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shardingsphere.apache.org/document/legacy/2.x/cn/03-design/roadmap/</guid>
      <description> 已完成 数据库  MySQL Oracle SQLServer PostgreSQL  DQL  Simple JOIN BETWEEN IN ORDER BY GROUP BY Aggregation LIMIT, rownum, TOP Simple Sub Query  DML  INSERT INTO INSERT SET UPDATE DELETE  DDL  CREATE ALTER DROP TRUNCATE  配置  Java API Spring命名空间 Yaml 读写分离独立化 配置集中化 配置动态化  SQL解析  词法分析 语法分析  SQL改写  正确性改写 优化改写  访问路由  Hint路由 简单路由 笛卡尔积路由  结果归并  流式归并 内存归并 装饰者归并  分库分表  分库 分表 默认数据源  读写分离  读写分离 同一线程且同一数据库连接内一致性保证 Hint强制主库路由  分布式主键  JDBC集成 分布式主键策略接口 基于snowflake的分布式主键算法实现  柔性事务  最大努力送达型  计划中 配置  读写分离独立化 Binding策略提升 集中化 动态化  治理  数据源健康检测及发现 数据源动态切换 流量控制  待定 DQL  DISTINCT HAVING OR UNION, UNION ALL Calculate Expression, eg: SUM(pv) / COUNT(uv) Complicated Sub Query SQL Hint  DML  INSERT INTO VALUES (xxx), (xxx) UPDATE Multiple Tables DELETE Multiple Tables  DDL  CREATE VIEW CREATE INDEX CREATE OR REPLACE  SQL解析提升  批量解析 冗余括号 通过SQL注释指定SQL Hint  柔性事务提升  TCC  运维工具  字典表复制广播 动态扩容  </description>
    </item>
    
  </channel>
</rss>